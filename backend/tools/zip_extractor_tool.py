from crewai.tools import tool
import os
import shutil
import sys

# Adiciona o diret√≥rio tools ao path para importar functions
sys.path.insert(0, os.path.dirname(__file__))
from functions import descompactar_arquivo

@tool("zip_extractor")
def zip_extractor_tool(caminho_arquivo_zip: str) -> str:
    """
    Extrai arquivos ZIP, 7Z, RAR, ARJ para o diret√≥rio dados/notasfiscais.
    Esta ferramenta usa a fun√ß√£o descompactar_arquivo do functions.py
    e √© especializada em descompactar arquivos contendo dados fiscais.
    
    Args:
        caminho_arquivo_zip: Caminho completo para o arquivo compactado
    
    Returns:
        Mensagem de sucesso ou erro com detalhes da extra√ß√£o
    """
    try:
        # Verifica se o arquivo existe
        if not os.path.exists(caminho_arquivo_zip):
            return f"‚ùå Erro: Arquivo n√£o encontrado em {caminho_arquivo_zip}"
        
        # Define o diret√≥rio de destino baseado no arquivo ZIP
        # Se o arquivo est√° em uploads/, extrai para uploads/dados/notasfiscais
        destino = os.path.join(os.path.dirname(caminho_arquivo_zip), 'dados', 'notasfiscais')
        
        # Cria o diret√≥rio de destino se n√£o existir
        os.makedirs(destino, exist_ok=True)
        
        # Limpa o diret√≥rio de destino
        for arquivo in os.listdir(destino):
            caminho_arquivo = os.path.join(destino, arquivo)
            try:
                if os.path.isfile(caminho_arquivo):
                    os.unlink(caminho_arquivo)
                elif os.path.isdir(caminho_arquivo):
                    shutil.rmtree(caminho_arquivo)
            except Exception as e:
                print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel limpar {caminho_arquivo}: {e}")
        
        # Usa a fun√ß√£o descompactar_arquivo do functions.py
        print(f"üîÑ Iniciando extra√ß√£o de {caminho_arquivo_zip} para {destino}")
        descompactar_arquivo(caminho_arquivo_zip, destino)
        
        # Verifica os arquivos extra√≠dos
        arquivos_extraidos = os.listdir(destino)
        csv_files = [f for f in arquivos_extraidos if f.lower().endswith('.csv')]
        
        if not csv_files:
            return f"‚ö†Ô∏è Aviso: Nenhum arquivo CSV encontrado ap√≥s extra√ß√£o em {destino}"
        
        # Procura especificamente pelos arquivos esperados
        cabecalho_file = None
        itens_file = None
        
        for arquivo in csv_files:
            nome_lower = arquivo.lower()
            if 'cabecalho' in nome_lower or 'header' in nome_lower:
                cabecalho_file = arquivo
            elif 'itens' in nome_lower or 'items' in nome_lower:
                itens_file = arquivo
        
        # Monta o relat√≥rio de resultado
        resultado = f"‚úÖ Extra√ß√£o conclu√≠da com sucesso usando functions.py!\n"
        resultado += f"üìÇ Destino: {destino}\n"
        resultado += f"üìÑ Arquivos extra√≠dos: {len(arquivos_extraidos)}\n"
        resultado += f"üìä CSVs encontrados: {len(csv_files)}\n"
        
        if cabecalho_file:
            resultado += f"üóÇÔ∏è Arquivo de cabe√ßalhos: {cabecalho_file}\n"
        if itens_file:
            resultado += f"üìã Arquivo de itens: {itens_file}\n"
        
        if not cabecalho_file or not itens_file:
            resultado += f"‚ö†Ô∏è Aviso: N√£o foram encontrados os arquivos padr√£o '*cabecalho*.csv' e '*itens*.csv'\n"
        
        resultado += f"üìã CSVs dispon√≠veis: {', '.join(csv_files)}\n"
        resultado += f"üéØ Base de dados RAG atualizada e pronta para consultas!"
        
        return resultado
        
    except FileNotFoundError as e:
        return f"‚ùå Erro: {str(e)}"
    except PermissionError:
        return f"‚ùå Erro: Permiss√£o negada para acessar {caminho_arquivo_zip} ou diret√≥rio de destino"
    except Exception as e:
        return f"‚ùå Erro inesperado durante a extra√ß√£o: {str(e)}"